name: Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy backend
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > vm.pem
          chmod 400 vm.pem

          if ! ssh -o StrictHostKeyChecking=no -i vm.pem ubuntu@${{ secrets.EC2_FRONTEND }} \
              "[ -f /home/ubuntu/vm.pem ]"; then
            scp -o StrictHostKeyChecking=no -i vm.pem \
                vm.pem \
                ubuntu@${{ secrets.EC2_FRONTEND }}:/home/ubuntu/vm.pem
          fi
          
          ssh -o StrictHostKeyChecking=no -i vm.pem ubuntu@${{ secrets.EC2_FRONTEND }} << "FRONTEND"
          chmod 400 ~/vm.pem

          ssh -o StrictHostKeyChecking=no -i ~/vm.pem ubuntu@${{ secrets.EC2_BACKEND }} << "BACKEND"

          sudo apt update && sudo apt upgrade -y

          sudo rm -rf ~/backend
          git clone https://github.com/QuanMinh086/investment-tracking-system.git

          if [ ! -f ~/.database_setup_done ]; then
            export DB_USER='${{ secrets.DB_USER }}'
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            export DB_NAME='${{ secrets.DB_NAME }}'
            bash ~/investment-tracking-system/.github/workflows/database_setup.sh
            touch ~/.database_setup_done
          fi

          cd ~/investment-tracking-system/backend
          cat <<EOT > .env
          PORT=8000
          DB_HOST=localhost
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=5432
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOT

          sudo mv ~/investment-tracking-system/backend ~/
          sudo rm -rf ~/investment-tracking-system

          cd ~/backend
          npm install

          if pm2 describe app >/dev/null 2>&1; then
            echo "→ pm2 process 'app' found; restarting"
            pm2 restart app
          else
            echo "→ no existing pm2 process named 'app'; starting fresh"
            pm2 start app.js --name app
          fi

          BACKEND
          FRONTEND
      
      - name: Deploy frontend
        env:
          EC2_FRONTEND: ${{ secrets.EC2_FRONTEND }}
          EC2_BACKEND:  ${{ secrets.EC2_BACKEND }}
        run: |
          ssh -o StrictHostKeyChecking=no -i vm.pem ubuntu@${EC2_FRONTEND} << 'EOF'
            sudo apt update && sudo apt upgrade -y
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs nginx

            sudo rm -rf ~/frontend
            git clone https://github.com/QuanMinh086/investment-tracking-system.git

            sudo mv ~/investment-tracking-system/frontend /home/ubuntu
            sudo rm -rf ~/investment-tracking-system

            cd /home/ubuntu/frontend
            cat <<EOT > .env
            REACT_APP_API_URL=/api
            EOT

            npm install
            npm run build

            sudo rm -rf /var/www/react-app
            sudo mkdir -p /var/www/react-app
            sudo cp -r build/* /var/www/react-app/
          EOF

          cat > app.conf <<'EOT'
            server {
              listen 80;
              server_name 98.80.205.221;

              root /var/www/react-app;
              index index.html index.htm;

              location / {
                try_files \$uri \$uri/ /index.html;
              }

              location /api/ {
                proxy_pass http://${EC2_BACKEND}:8000/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
              }
            }
          EOT

          scp -o StrictHostKeyChecking=no -i vm.pem app.conf ubuntu@${EC2_FRONTEND}:/home/ubuntu/app.conf
          ssh -o StrictHostKeyChecking=no -i vm.pem ubuntu@${EC2_FRONTEND} << 'EOF2'
            sudo mv /home/ubuntu/app.conf /etc/nginx/sites-available/app.conf
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/app.conf
            sudo nginx -t
            sudo systemctl reload nginx
          EOF2